,model,improvements,cost,solutions,utility,average_utility,modified_solutions,print_returns
0,improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,0.0,,
1,improver,1,0.35862,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,0.0,,
2,improver,2,0.6664800000000001,def algorithm(*args): return 0,0.41666666666666663,0.507142857142857,,
3,improver,3,0.9317100000000001,"
import numpy as np

def hamming_distance(a, b):
    return np.sum(a != b, axis=1)

def k_nearest_neighbors(train_samples, train_labels, test_samples, k=3):
    predictions = []
    for test_sample in test_samples:
        distances = hamming_distance(train_samples, test_sample)
        nearest_neighbors = np.argsort(distances)[:k]
        majority_class = np.bincount(train_labels[nearest_neighbors]).argmax()
        predictions.append(majority_class)
    return np.array(predictions)

def algorithm(train_samples, train_parity, test_samples):
    return k_nearest_neighbors(train_samples, train_parity, test_samples)
",0.6666666666666667,0.6047619047619047,,
4,improver,4,1.26771,"
import numpy as np

def hamming_distance(a, b):
    return np.sum(a != b, axis=1)

def k_nearest_neighbors(train_samples, train_labels, test_samples, k=3):
    predictions = []
    for test_sample in test_samples:
        distances = hamming_distance(train_samples, test_sample)
        nearest_neighbors = np.argsort(distances)[:k]
        majority_class = np.bincount(train_labels[nearest_neighbors]).argmax()
        predictions.append(majority_class)
    return np.array(predictions)

def algorithm(train_samples, train_parity, test_samples):
    return k_nearest_neighbors(train_samples, train_parity, test_samples)
",0.6666666666666667,0.6047619047619047,,
5,improver,5,1.63737,"
import numpy as np

class Node:
    def __init__(self, point, label, left=None, right=None):
        self.point = point
        self.label = label
        self.left = left
        self.right = right

def build_kd_tree(points, labels, depth=0):
    if len(points) == 0:
        return None

    k = len(points[0])
    axis = depth % k

    sorted_indices = np.argsort(points[:, axis])
    median = len(sorted_indices) // 2

    return Node(
        points[sorted_indices[median]],
        labels[sorted_indices[median]],
        build_kd_tree(points[sorted_indices[:median]], labels[sorted_indices[:median]], depth + 1),
        build_kd_tree(points[sorted_indices[median+1:]], labels[sorted_indices[median+1:]], depth + 1)
    )

def k_nearest_neighbors(node, point, k, depth=0):
    if node is None:
        return []

    k = len(node.point)
    axis = depth % k

    next_branch = None
    opposite_branch = None

    if point[axis] < node.point[axis]:
        next_branch = node.left
        opposite_branch = node.right
    else:
        next_branch = node.right
        opposite_branch = node.left

    best = k_nearest_neighbors(next_branch, point, k, depth + 1)

    if len(best) < k or np.linalg.norm(node.point - point) < np.linalg.norm(best[-1][0] - point):
        best.append((node.point, node.label))
        best.sort(key=lambda x: np.linalg.norm(x[0] - point))
        if len(best) > k:
            best = best[:k]

    if len(best) < k or abs(node.point[axis] - point[axis]) < np.linalg.norm(best[-1][0] - point):
        best += k_nearest_neighbors(opposite_branch, point, k, depth + 1)
        best.sort(key=lambda x: np.linalg.norm(x[0] - point))
        if len(best) > k:
            best = best[:k]

    return best

def algorithm(train_samples, train_parity, test_samples):
    root = build_kd_tree(train_samples, train_parity)
    predictions = []
    for test_sample in test_samples:
        neighbors = k_nearest_neighbors(root, test_sample, 3)
        majority_class = np.argmax(np.bincount([label for _, label in neighbors]))
        predictions.append(majority_class)
    return np.array(predictions)
",0.6499999999999999,0.2619047619047619,,
0,print_improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",None
1,print_improver,1,0.70602,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,0.3619047619047619,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",
2,print_improver,2,0.96411,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,0.3619047619047619,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",
3,print_improver,3,1.2958500000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,0.3619047619047619,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",
4,print_improver,4,1.6162800000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,0.3619047619047619,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",
5,print_improver,5,1.8788100000000005,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,0.3619047619047619,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",
