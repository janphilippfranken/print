,model,improvements,cost,solutions,utility
0,improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0
1,improver,1,0.24491999999999997,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gaussian elimination
    for i in range(n):
        if aug_matrix[i, i] == 0:  # pivot is zero, skip to next row
            continue
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                np.bitwise_xor(aug_matrix[j], aug_matrix[i], out=aug_matrix[j])

    # Back substitution and calculating test parity
    true_bits = np.zeros(n, dtype=int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:])
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",0.5499999999999999
2,improver,2,0.48822000000000004,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gauss-Jordan elimination
    for i in range(n):
        max_el = np.abs(aug_matrix[i:, i]).argmax() + i
        if aug_matrix[max_el, i] == 0:  # pivot is zero, skip to next row
            continue
        aug_matrix[[i, max_el]] = aug_matrix[[max_el, i]]  # swap rows
        for j in range(i+1, len(aug_matrix)):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])
        for j in range(i):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])

    # Calculating test parity
    true_bits = aug_matrix[:, n].astype(int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in range(n):
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",1.0
3,improver,3,0.7191299999999999,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gauss-Jordan elimination
    for i in range(n):
        max_el = np.abs(aug_matrix[i:, i]).argmax() + i
        if aug_matrix[max_el, i] == 0:  # pivot is zero, skip to next row
            continue
        aug_matrix[[i, max_el]] = aug_matrix[[max_el, i]]  # swap rows
        for j in range(i+1, len(aug_matrix)):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])
        for j in range(i):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])

    # Calculating test parity
    true_bits = aug_matrix[:, n].astype(int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in range(n):
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",1.0
4,improver,4,0.9398400000000001,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gauss-Jordan elimination
    for i in range(n):
        max_el = np.abs(aug_matrix[i:, i]).argmax() + i
        if aug_matrix[max_el, i] == 0:  # pivot is zero, skip to next row
            continue
        aug_matrix[[i, max_el]] = aug_matrix[[max_el, i]]  # swap rows
        for j in range(i+1, len(aug_matrix)):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])
        for j in range(i):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])

    # Calculating test parity
    true_bits = aug_matrix[:, n].astype(int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in range(n):
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",1.0
5,improver,5,1.1696700000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gauss-Jordan elimination
    for i in range(n):
        max_el = np.abs(aug_matrix[i:, i]).argmax() + i
        if aug_matrix[max_el, i] == 0:  # pivot is zero, skip to next row
            continue
        aug_matrix[[i, max_el]] = aug_matrix[[max_el, i]]  # swap rows
        for j in range(i+1, len(aug_matrix)):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])
        for j in range(i):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])

    # Calculating test parity
    true_bits = aug_matrix[:, n].astype(int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in range(n):
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",1.0
6,improver,6,1.4149200000000004,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gauss-Jordan elimination
    for i in range(n):
        max_el = np.abs(aug_matrix[i:, i]).argmax() + i
        if aug_matrix[max_el, i] == 0:  # pivot is zero, skip to next row
            continue
        aug_matrix[[i, max_el]] = aug_matrix[[max_el, i]]  # swap rows
        for j in range(i+1, len(aug_matrix)):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])
        for j in range(i):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])

    # Calculating test parity
    true_bits = aug_matrix[:, n].astype(int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in range(n):
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",1.0
7,improver,7,1.6424700000000005,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))

    # Gauss-Jordan elimination
    for i in range(n):
        max_el = np.abs(aug_matrix[i:, i]).argmax() + i
        if aug_matrix[max_el, i] == 0:  # pivot is zero, skip to next row
            continue
        aug_matrix[[i, max_el]] = aug_matrix[[max_el, i]]  # swap rows
        for j in range(i+1, len(aug_matrix)):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])
        for j in range(i):
            if aug_matrix[j, i] != 0:
                aug_matrix[j] = np.bitwise_xor(aug_matrix[j], aug_matrix[i])

    # Calculating test parity
    true_bits = aug_matrix[:, n].astype(int)
    test_parity = np.zeros(len(test_samples), dtype=int)
    for i in range(n):
        test_parity ^= test_samples[:, i] & true_bits[i]

    return test_parity
",1.0
