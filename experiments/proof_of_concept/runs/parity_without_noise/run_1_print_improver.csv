,model,improvements,cost,solutions,utility,modified_solutions,print_returns,average_utility
0,print_improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",None,0.0
1,print_improver,1,0.48957,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = np.argmax(aug_matrix[i:, i] != 0) + i
        if aug_matrix[pivot_row, i] != 0:
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            rows_to_update = np.where(aug_matrix[i + 1:, i])[0] + i + 1
            aug_matrix[rows_to_update] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i + 1:n] * true_bits[i + 1:n])

    test_parity = np.sum(test_samples * true_bits, axis=1) % 2
    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    print(f'Initial augmented matrix:\n{aug_matrix}\n')  # print the initial matrix

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            print(f'Augmented matrix after row swapping at i={i}:\n{aug_matrix}\n')  # print matrix after row swapping

            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
            print(f'Augmented matrix after row operation at i={i}:\n{aug_matrix}\n')  # print matrix after row operation

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    print(f'True bits:\n{true_bits}\n')  # print the true bits

    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    print(f'Test parity:\n{test_parity}\n')  # print the test parity

    return test_parity
",,0.6233333333333333
2,print_improver,2,0.6595799999999999,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = np.argmax(aug_matrix[i:, i] != 0) + i
        if aug_matrix[pivot_row, i] != 0:
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            rows_to_update = np.where(aug_matrix[i + 1:, i])[0] + i + 1
            aug_matrix[rows_to_update] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i + 1:n] * true_bits[i + 1:n])

    test_parity = np.sum(test_samples * true_bits, axis=1) % 2
    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    print(f'Initial augmented matrix:\n{aug_matrix}\n')  # print the initial matrix

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            print(f'Augmented matrix after row swapping at i={i}:\n{aug_matrix}\n')  # print matrix after row swapping

            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
            print(f'Augmented matrix after row operation at i={i}:\n{aug_matrix}\n')  # print matrix after row operation

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    print(f'True bits:\n{true_bits}\n')  # print the true bits

    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    print(f'Test parity:\n{test_parity}\n')  # print the test parity

    return test_parity
",,0.6233333333333333
3,print_improver,3,1.01208,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = np.argmax(aug_matrix[i:, i] != 0) + i
        if aug_matrix[pivot_row, i] != 0:
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            rows_to_update = np.where(aug_matrix[i + 1:, i])[0] + i + 1
            aug_matrix[rows_to_update] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i + 1:n] * true_bits[i + 1:n])

    test_parity = np.sum(test_samples * true_bits, axis=1) % 2
    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    print(f'Initial augmented matrix:\n{aug_matrix}\n')  # print the initial matrix

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            print(f'Augmented matrix after row swapping at i={i}:\n{aug_matrix}\n')  # print matrix after row swapping

            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
            print(f'Augmented matrix after row operation at i={i}:\n{aug_matrix}\n')  # print matrix after row operation

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    print(f'True bits:\n{true_bits}\n')  # print the true bits

    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    print(f'Test parity:\n{test_parity}\n')  # print the test parity

    return test_parity
",,0.6233333333333333
4,print_improver,4,1.1901899999999999,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = np.argmax(aug_matrix[i:, i] != 0) + i
        if aug_matrix[pivot_row, i] != 0:
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            rows_to_update = np.where(aug_matrix[i + 1:, i])[0] + i + 1
            aug_matrix[rows_to_update] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i + 1:n] * true_bits[i + 1:n])

    test_parity = np.sum(test_samples * true_bits, axis=1) % 2
    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    print(f'Initial augmented matrix:\n{aug_matrix}\n')  # print the initial matrix

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            print(f'Augmented matrix after row swapping at i={i}:\n{aug_matrix}\n')  # print matrix after row swapping

            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
            print(f'Augmented matrix after row operation at i={i}:\n{aug_matrix}\n')  # print matrix after row operation

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    print(f'True bits:\n{true_bits}\n')  # print the true bits

    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    print(f'Test parity:\n{test_parity}\n')  # print the test parity

    return test_parity
",,0.6233333333333333
5,print_improver,5,1.5175499999999997,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = np.argmax(aug_matrix[i:, i] != 0) + i
        if aug_matrix[pivot_row, i] != 0:
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            rows_to_update = np.where(aug_matrix[i + 1:, i])[0] + i + 1
            aug_matrix[rows_to_update] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i + 1:n] * true_bits[i + 1:n])

    test_parity = np.sum(test_samples * true_bits, axis=1) % 2
    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    print(f'Initial augmented matrix:\n{aug_matrix}\n')  # print the initial matrix

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            print(f'Augmented matrix after row swapping at i={i}:\n{aug_matrix}\n')  # print matrix after row swapping

            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
            print(f'Augmented matrix after row operation at i={i}:\n{aug_matrix}\n')  # print matrix after row operation

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    print(f'True bits:\n{true_bits}\n')  # print the true bits

    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    print(f'Test parity:\n{test_parity}\n')  # print the test parity

    return test_parity
",,0.6233333333333333
