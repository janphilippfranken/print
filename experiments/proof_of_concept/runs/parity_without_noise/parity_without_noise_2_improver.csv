,model,improvements,cost,solutions,utility
0,improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0
1,improver,1,0.14487,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot_rows = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot_rows) > 0:
            pivot_row = pivot_rows[0] + i
            pivot_mask = (aug_matrix[:, i] == 1)
            aug_matrix[pivot_mask] = (aug_matrix[pivot_mask] - aug_matrix[i]) % 2
            aug_matrix[i, :] = (aug_matrix[i, :] + aug_matrix[pivot_row, :]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:n])
    test_parity = ((true_bits & test_samples).sum(axis=1)) % 2
    return test_parity
",0.39999999999999997
2,improver,2,0.28968,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    pivot_mask = np.zeros(aug_matrix.shape[0], dtype=bool)
    for i in range(n):
        pivot_rows = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot_rows) > 0:
            pivot_row = pivot_rows[0] + i
            pivot_mask[:] = 0
            pivot_mask[i:] = (aug_matrix[i:, i] == 1)
            aug_matrix[pivot_mask] ^= aug_matrix[i]
            aug_matrix[i, :] ^= aug_matrix[pivot_row, :]
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:n])
    test_parity = ((true_bits & test_samples).sum(axis=1)) % 2
    return test_parity
",0.5666666666666667
3,improver,3,0.43872,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    pivot_mask = np.zeros(aug_matrix.shape[0], dtype=bool)

    for i in range(n):
        pivot_rows = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot_rows) > 0:
            pivot_row = pivot_rows[0] + i
            pivot_mask[:] = 0
            pivot_mask[i:] = (aug_matrix[i:, i] == 1)
            # perform XOR operations on the submatrix from pivot row downwards
            aug_matrix[pivot_mask, i:] ^= aug_matrix[i, i:]
            # swap rows in-place
            aug_matrix[i, i:], aug_matrix[pivot_row, i:] = aug_matrix[pivot_row, i:].copy(), aug_matrix[i, i:].copy()

    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        # using numpy's dot function
        true_bits[i] = aug_matrix[i, n] ^ np.dot(aug_matrix[i, i+1:n], true_bits[i+1:n])

    test_parity = ((true_bits & test_samples).sum(axis=1)) % 2
    return test_parity
",0.75
