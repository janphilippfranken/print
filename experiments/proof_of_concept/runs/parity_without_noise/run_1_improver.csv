,model,improvements,cost,solutions,utility,average_utility
0,improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,0.0
1,improver,1,0.24239999999999998,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.argmax(aug_matrix[i:, i]) + i
        if aug_matrix[pivot, i] == 1:
            aug_matrix[[i, pivot]] = aug_matrix[[pivot, i]]
            aug_matrix[i+1:, i] = (aug_matrix[i+1:, i] - aug_matrix[i, i] * aug_matrix[i+1:, i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.dot(aug_matrix[i, i+1:n], true_bits[i+1:n])
    test_parity = (np.dot(test_samples, true_bits) + np.sum(test_samples, axis=1)) % 2
    return test_parity
",0.5833333333333333,0.19
2,improver,2,0.49779,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.argmax(aug_matrix[i:, i]) + i
        if aug_matrix[pivot, i] == 1:
            aug_matrix[[i, pivot]] = aug_matrix[[pivot, i]]
            aug_matrix[i+1:, i] = (aug_matrix[i+1:, i] - aug_matrix[i, i] * aug_matrix[i+1:, i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.dot(aug_matrix[i, i+1:n], true_bits[i+1:n])
    test_parity = (np.dot(test_samples, true_bits) + np.sum(test_samples, axis=1)) % 2
    return test_parity
",0.5833333333333333,0.19
3,improver,3,0.7393799999999999,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.argmax(aug_matrix[i:, i]) + i
        if aug_matrix[pivot, i] == 1:
            aug_matrix[[i, pivot]] = aug_matrix[[pivot, i]]
            aug_matrix[i+1:, i] = (aug_matrix[i+1:, i] - aug_matrix[i, i] * aug_matrix[i+1:, i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.dot(aug_matrix[i, i+1:n], true_bits[i+1:n])
    test_parity = (np.dot(test_samples, true_bits) + np.sum(test_samples, axis=1)) % 2
    return test_parity
",0.5833333333333333,0.19
4,improver,4,0.99891,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.argmax(aug_matrix[i:, i]) + i
        if aug_matrix[pivot, i] == 1:
            aug_matrix[[i, pivot]] = aug_matrix[[pivot, i]]
            aug_matrix[i+1:, i] = (aug_matrix[i+1:, i] - aug_matrix[i, i] * aug_matrix[i+1:, i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.dot(aug_matrix[i, i+1:n], true_bits[i+1:n])
    test_parity = (np.dot(test_samples, true_bits) + np.sum(test_samples, axis=1)) % 2
    return test_parity
",0.5833333333333333,0.19
5,improver,5,1.2409199999999998,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.argmax(aug_matrix[i:, i]) + i
        if aug_matrix[pivot, i] == 1:
            aug_matrix[[i, pivot]] = aug_matrix[[pivot, i]]
            aug_matrix[i+1:, i] = (aug_matrix[i+1:, i] - aug_matrix[i, i] * aug_matrix[i+1:, i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n] ^ np.dot(aug_matrix[i, i+1:n], true_bits[i+1:n])
    test_parity = (np.dot(test_samples, true_bits) + np.sum(test_samples, axis=1)) % 2
    return test_parity
",0.5833333333333333,0.19
