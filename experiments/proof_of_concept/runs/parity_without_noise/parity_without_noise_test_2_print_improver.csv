,model,improvements,cost,solutions,utility,modified_solutions,print_returns,average_utility
0,print_improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",None,0.0
1,print_improver,1,0.70602,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",,0.3619047619047619
2,print_improver,2,0.96411,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",,0.3619047619047619
3,print_improver,3,1.2958500000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",,0.3619047619047619
4,print_improver,4,1.6162800000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",,0.3619047619047619
5,print_improver,5,1.8788100000000005,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    
    for i in range(n):
        pivot_row = i
        while pivot_row < len(aug_matrix) and aug_matrix[pivot_row, i] == 0:
            pivot_row += 1

        if pivot_row == len(aug_matrix):
            continue
        
        if pivot_row != i:
            aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
        for j in range(i + 1, len(aug_matrix)):
            if aug_matrix[j, i] == 1:
                aug_matrix[j] ^= aug_matrix[i]

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    test_parity = np.sum(true_bits & test_samples, axis=1) % 2

    return test_parity
",1.0,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    
    print(f'aug_matrix initial state: {aug_matrix}')  # Print initial state of augmented matrix.

    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        print(f'pivot for i={i}: {pivot}')  # Print pivot for each iteration.
        
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            print(f'pivot_row for i={i}: {pivot_row}')  # Print pivot row for each iteration.
            
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2

    print(f'aug_matrix after pivoting: {aug_matrix}')  # Print augmented matrix after pivoting.

    true_bits = np.zeros(n, dtype=int)
    
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]

    print(f'true_bits: {true_bits}')  # Print the true bits.

    test_parity = np.sum(true_bits+test_samples, axis=1) % 2

    print(f'test_parity: {test_parity}')  # Print the test parity.

    return test_parity
",,0.3619047619047619
