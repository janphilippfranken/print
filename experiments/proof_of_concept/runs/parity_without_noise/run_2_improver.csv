,model,improvements,cost,solutions,utility,average_utility
0,improver,0,0.0,"import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(1, -1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            for j in range(i + 1, len(aug_matrix)):
                if aug_matrix[j, i] == 1:
                    aug_matrix[j] = (aug_matrix[j] - aug_matrix[i]) % 2
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        for j in range(i + 1, n):
            if aug_matrix[i, j] == 1:
                true_bits[i] ^= true_bits[j]
    test_parity = np.sum(true_bits + test_samples, axis=1) % 2
    return test_parity",0.0,0.0
1,improver,1,0.25422,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            mask = aug_matrix[i+1:, i] == 1
            aug_matrix[i+1:][mask] ^= aug_matrix[i]
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        true_bits[i] ^= np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:], axis=0)
    test_parity = np.sum(true_bits & test_samples, axis=1) % 2
    return test_parity
",1.0,0.4
2,improver,2,0.48774000000000006,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            mask = aug_matrix[i+1:, i] == 1
            aug_matrix[i+1:][mask] ^= aug_matrix[i]
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        true_bits[i] ^= np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:], axis=0)
    test_parity = np.sum(true_bits & test_samples, axis=1) % 2
    return test_parity
",1.0,0.4
3,improver,3,0.7204200000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            mask = aug_matrix[i+1:, i] == 1
            aug_matrix[i+1:][mask] ^= aug_matrix[i]
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        true_bits[i] ^= np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:], axis=0)
    test_parity = np.sum(true_bits & test_samples, axis=1) % 2
    return test_parity
",1.0,0.4
4,improver,4,0.9628800000000002,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            mask = aug_matrix[i+1:, i] == 1
            aug_matrix[i+1:][mask] ^= aug_matrix[i]
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        true_bits[i] ^= np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:], axis=0)
    test_parity = np.sum(true_bits & test_samples, axis=1) % 2
    return test_parity
",1.0,0.4
5,improver,5,1.1978400000000005,"
import numpy as np

def algorithm(train_samples, train_parity, test_samples):
    n = train_samples.shape[1]
    aug_matrix = np.hstack((train_samples, train_parity.reshape(-1, 1)))
    for i in range(n):
        pivot = np.where(aug_matrix[i:, i] == 1)[0]
        if len(pivot) > 0:
            pivot_row = pivot[0] + i
            if pivot_row != i:
                aug_matrix[[i, pivot_row]] = aug_matrix[[pivot_row, i]]
            mask = aug_matrix[i+1:, i] == 1
            aug_matrix[i+1:][mask] ^= aug_matrix[i]
    true_bits = np.zeros(n, dtype=int)
    for i in reversed(range(n)):
        true_bits[i] = aug_matrix[i, n]
        true_bits[i] ^= np.sum(aug_matrix[i, i+1:n] & true_bits[i+1:], axis=0)
    test_parity = np.sum(true_bits & test_samples, axis=1) % 2
    return test_parity
",1.0,0.4
